#include <iostream>
using namespace std;

// Define a Node structure for the linked list
struct Node {
    int key;
    Node* next;
    Node(int val) : key(val), next(nullptr) {}
};

// Function to insert a node at the end of the linked list
void insertAtEnd(Node*& head, int val) {
    Node* newNode = new Node(val);
    if (head == nullptr) {
        // If the list is empty, make the new node the head
        head = newNode;
    } else {
        // Otherwise, traverse to the end and add the new node
        Node* current = head;
        while (current->next != nullptr) {
            current = current->next;
        }
        current->next = newNode;
    }
}

// Function baz that prints every second node in the linked list
void baz(Node* head) {
    if (head == nullptr)
        return;
    baz(head->next->next);
    cout << head->key << " ";
}

// Function to print the linked list
void printList(Node* head) {
    while (head != nullptr) {
        cout << head->key << " ";
        head = head->next;
    }
    cout << endl;
}

int main() {
    // Creating a sample linked list: 1 -> 2 -> 3 -> 4 -> 5 -> 6
    Node* head = nullptr;
    // Insert elements at the end
    insertAtEnd(head, 1);
    insertAtEnd(head, 2);
    insertAtEnd(head, 3);
    insertAtEnd(head, 4);
    insertAtEnd(head, 5);
    insertAtEnd(head, 6);
    
    // Print the original linked list
    cout << "Original Linked List: ";
    printList(head);
    
    // Call the baz function and print every second node
    cout << "Output of baz function: ";
    baz(head);
    cout << endl;

    return 0;
}
